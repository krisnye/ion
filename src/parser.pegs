{

    const ast = require('./IonAst')

    function node(type, ...values) {
        let result = Object.assign({__location:location()}, ...values.reverse())
        //  construct directly into our IonAst nodes
        let ctor = ast[type]
        if (ctor != null)
            return new ctor(result)
        else
            throw new Error('Type not found: ' + type)
        return result
    }

    function operation(left, operator, right) {
            return node("BinaryExpression", {left,operator,right})
    }

    function buildBinaryExpression(head, tail) {
        return tail.reduce(
            (left, [,operator,,right]) => operation(left, operator, right)
            ,head
        )
    }

}

////////////////////////////////////////////////////////////////////////////////
//  Module
////////////////////////////////////////////////////////////////////////////////

Module
    = EOL? imports:ImportDeclarations? declarations:Declaration* exports:Export EOL EOF
    { return node("Module", {imports:imports || [], declarations, exports}) }

Export
    //  Allow Declaration meta properties to be specified before the export declaration
    = meta:MetaProperties ExportToken _ value:Declaration { return node(value.constructor.name, {meta}, value) }
    / ExportToken EOL Indent @(Dent @Declaration)+ Outdent

////////////////////////////////////////////////////////////////////////////////
//  ImportDeclaration
////////////////////////////////////////////////////////////////////////////////

ModulePath
    = head:Id tail:("." @Id)*
    { return [head, ...tail] }

SubImports
    = Indent @(Dent @ImportDeclaration)+ Outdent

ImportDeclaration
    = relative:'.'+ "*" EOL
    {
        return node("ImportDeclaration", {relative:relative.length,path:[],children:true,as:null})
    }
    / relative:'.'* path:ModulePath as:(_ AsToken _ @Id)? children:(".*" EOL { return true } / EOL @SubImports?)
    {
        if (children === undefined)
            children = null
        if (as == null && children == null)
            as = path[path.length-1]
        return node("ImportDeclaration", {relative:relative.length,path,children,as})
    }

ImportDeclarations
    = ImportToken EOL @SubImports

////////////////////////////////////////////////////////////////////////////////
//  Statements
////////////////////////////////////////////////////////////////////////////////

Statement
    = Declaration
    / AssignmentStatement
    / OutlineExpression
    / IfStatement
    / ForInStatement
    / ReturnStatement
    / WhileStatement

Declaration
    = ClassDeclaration
    / VariableDeclaration

VariableDeclarationType
    = VarToken { return {assignable:true, property:false} }
    / LetToken { return {assignable:false, property:false} }
    / PropertyToken { return {assignable:false, property:true} }

VariableDeclaration
    = TypeToken _ id:UpperCaseId _ "=" _ value:Type EOL
    { return node('VariableDeclaration', {assignable:false, id, value}) }
    / meta:MetaProperties declarationType: VariableDeclarationType
        _ id:Pattern _ type:(":" _ @Type)? _ value:('=' _ @OutlineExpression / EOL {return null})?
    { return node("VariableDeclaration", declarationType, {id, type, value, meta }) }

MetaProperties
 = (@DynamicOutlineProperty Dent)*

DynamicOutlineProperty
    = '[' _ key:InlineExpression _ ']' value:(_ ":" _ @OutlineExpression / EOL { return null })
    { return node("Property", {key, value, computed:true} ) }

// VariableMetaProperties
//     = EOL Indent @OutlineProperty+ Outdent

AssignmentOperator
    = "="
    / "+="
    / "-="
    / "*="
    / "\="

AssignmentStatement
    = left:Pattern _ op:AssignmentOperator _ right:OutlineExpression
    {
        if (op.length > 1) {
            right = operation(left, node("Id",{name:op.slice(0,-1)}), right)
        }
        return node("AssignmentStatement", {left, right})
    }

BlockStatement
    = EOL Indent body:(Dent @Statement)+ Outdent
    { return node("BlockStatement", body) }

ForInStatement
    = ForToken _ left:Pattern _ InToken _ right:InlineExpression body:BlockStatement
    { return node("ForInStatement", {left, right, body} ) }

WhileStatement
    = WhileToken _ test:InlineExpression body:BlockStatement
    { return node("WhileStatement", {test,body}) }

IfStatement
    = IfToken _ test:InlineExpression consequent:BlockStatement
        alternate:(Dent ElseToken _ @(BlockStatement / IfStatement))?
    { return node("IfStatement", {test, consequent, alternate}) }

ReturnStatement
    = ReturnToken _ argument:InlineExpression? EOL
    { return node("ReturnStatement", {argument}) }

////////////////////////////////////////////////////////////////////////////////
//  Patterns
////////////////////////////////////////////////////////////////////////////////

Pattern
    = Id
    / ArrayPattern
    / ObjectPattern

ArrayPattern
    = "[" _ element:RestElement _ "]"
    { return node("ArrayPattern", {elements:[element]}) }
    / "[" _ head:Pattern? tail:(_ "," _ !"." @Pattern?)* _ rest:("," _ @RestElement)? _ "]"
    {
        let elements = [head || null, ...tail.map((x) => x || null)]
        if (rest)
            elements.push(rest)
        return node("ArrayPattern", {elements})
    }

RestElement
    = "..." argument:Pattern
    { return node("RestElement", {argument}) }

ObjectPattern
    = "{" _ head:AssignmentProperty tail:(_ "," @AssignmentProperty)* _ "}"
    { return node("ObjectPattern", {properties:[head, ...tail]}) }

AssignmentProperty
    = key:Id value:(_ ":" _ @Pattern)?
    { return node("Property", {key, value:value || node("Id", key), shorthand:value == null} ) }

////////////////////////////////////////////////////////////////////////////////
//  Class
////////////////////////////////////////////////////////////////////////////////

ClassDeclaration
    = meta:MetaProperties isStructure:(ClassToken { return false } / StructToken {return true})
        _ id:UpperCaseId templateParameters:TemplateParameters? _ baseClasses:Extends? EOL
        Indent declarations:(Dent @Declaration)* Outdent
        { return node("ClassDeclaration", {isStructure, id, templateParameters, meta, baseClasses:baseClasses || [], declarations}) }

TemplateParameters
    = "<" _ head:Parameter tail:(_ ',' _ @Parameter)* _ ">" { return [head, ...tail] }

Extends
    = ExtendsToken _ head:TemplateReference tail:(_ "," _ @TemplateReference)*
    { return [head, ...tail] }

////////////////////////////////////////////////////////////////////////////////
//  TypeExpression
////////////////////////////////////////////////////////////////////////////////

Type
    = FunctionType
    / UnionType
    / "(" _ @Type _ ")"

UnionType
    = left:IntersectionType right:(_ "|" _ @UnionType)?
    { return right ? node('UnionType', {left, right}) : left }

IntersectionType
    = left:ConstrainedType right:(_ "&" _ @IntersectionType)?
    { return right ? node('IntersectionType', {left, right}) : left }

ConstrainedType
    = baseType:TemplateReference constraint:(' ' WhereToken ' ' _ @InlineExpression)?
    { return constraint ? node('ConstrainedType', {baseType,constraint}) : baseType }
    / LiteralType

LiteralType
   = literal:Literal { return node('LiteralType', {literal}) }

FunctionType
    = parameters:FunctionParameters _ "->" _ returnType:Type
    { return node("FunctionType", {parameters, returnType}) }

TemplateArgument
    = Type
    / InlineExpression

TemplateArguments
    = "<" _ head:TemplateArgument tail:(_ "," _ @TemplateArgument)*  _ ">"
    { return [head, ...tail] }

TemplateReference
    = reference:Reference args:(_ @TemplateArguments)?
    { return args ? node("TemplateReference", {reference,arguments:args}) : reference }
    // / "[" _ type:Type '*' _ "]"
    // { return node("TemplateReference", {id:node('Id',{name:"Array"}), arguments:[type]}) }
    // / "[" _ head:Type tail:(_ "," _ @Type)+ _ "]"
    // {
    //     //  no actual pattern yet, just types
    //     let types = [head, ...tail]
    //     return node("TemplateReference", {id:node('Id',{name:"Array"}), arguments:[node("UnionType", {types})], pattern:types})
    // }

Quantifier
    = "?" { return [0,1] }
    / "*" { return [0, null] }
    / "+" { return [1, null] }
    / Range

Range
    = from:DecimalInteger _ ".." _ to:DecimalInteger? { return [from, to || null] }
    / ".." _ to:DecimalInteger { return [null, to] }
    / value:DecimalInteger { return [value, value] }

KeyValue
    = key:Type value:(_ ':' _ @Type)? _ quantifier:Quantifier?
        { return node('KeyValue', {key, value, quantifier} ) }

CollectionType
    = '[' _ ']'
        { return node('CollectionType', {elements:[]}) }
    / '[' _ head:KeyValue tail:(_ ',' _ @KeyValue)* _ ']'
        { return node('CollectionType', {elements:[head, ...tail]}) }

////////////////////////////////////////////////////////////////////////////////
//  Operations
////////////////////////////////////////////////////////////////////////////////

UnaryOperator
    = "+" / "-" / @"not" " " _

UnaryExpression
    = MemberExpression
    / operator:UnaryOperator argument:MemberExpression { return operation(argument, operator) }

ExponentiationOperator "operator"
    = "^" / "<<" / ">>"

ExponentiationExpression
    = left:UnaryExpression right:(_ operator:ExponentiationOperator _ right:ExponentiationExpression {return {operator,right}})?
    { return right ? node("BinaryExpression", {left, operator:right.operator, right:right.right}) : left }

MultiplicativeOperator
    = "*" / "/" / "%"

MultiplicativeExpression
    = head:ExponentiationExpression tail:(_ MultiplicativeOperator _ ExponentiationExpression)*
    { return buildBinaryExpression(head, tail) }

AdditiveOperator
    = "+" / "-"

AdditiveExpression
    = head:MultiplicativeExpression tail:(_ AdditiveOperator _ MultiplicativeExpression)*
    { return buildBinaryExpression(head, tail) }

RelationalOperator
    = "<=" / ">=" / "<" / ">" / "is"

RelationalExpression
    = head:AdditiveExpression tail:(_ RelationalOperator _ AdditiveExpression)*
        { return buildBinaryExpression(head, tail) }
    / tail:(_ RelationalOperator _ AdditiveExpression)
        { return buildBinaryExpression(node('DotExpression') , [tail]) }

EqualityOperator
    = "==" / "!="

EqualityExpression
    = head:RelationalExpression tail:(_ EqualityOperator _ RelationalExpression)*
    { return buildBinaryExpression(head, tail) }

LogicalAndOperator
    = AndToken

LogicalAndExpression
    = head:EqualityExpression tail:(_ LogicalAndOperator _ EqualityExpression)*
    { return buildBinaryExpression(head, tail) }

LogicalOrOperator
    = OrToken / XorToken

LogicalOrExpression
    = head:LogicalAndExpression tail:(_ LogicalOrOperator _ LogicalAndExpression)*
    { return buildBinaryExpression(head, tail) }

ConditionalOperator
    = "?"

ConditionalExpression
    = test:LogicalOrExpression
        body:(
            _ ConditionalOperator _ consequent:ConditionalExpression
            _ ':' _ alternate:ConditionalExpression
            { return {consequent,alternate}}
        )?
    { return body ? node('ConditionalExpression', {test}, body) : test }

////////////////////////////////////////////////////////////////////////////////
//  Functions
////////////////////////////////////////////////////////////////////////////////

Parameter
    = pattern:Pattern _ type:(":" _ @Type)? _ _default:("=" _ @InlineExpression)?
    { return node("Parameter", {pattern, type, default:_default})}

FunctionParameters
    = "(" _ ")" { return [] }
    / bare:Parameter { return [bare] }
    / "(" _ head:Parameter tail:(_ ',' _ @Parameter)* _ ")" { return [head, ...tail] }

FunctionHead
    = id:(@Id _ &"(")? parameters:FunctionParameters? _ "->"
    { return {id, parameters: parameters || []} }

InlineFunction
    = head:FunctionHead _ value:InlineExpression
    { return node("FunctionExpression", head, {body:node("BlockStatement", {body:[node("ReturnStatement",{argument:value})]})}) }

OutlineFunction
    = head:FunctionHead _ body:BlockStatement
    { return node("FunctionExpression", head, {body}) }

////////////////////////////////////////////////////////////////////////////////
//  Expressions
////////////////////////////////////////////////////////////////////////////////

OutlineExpression
    = OutlineFunction
    / OutlineCallExpression
    / OutlineStringLiteral
    / @InlineExpression EOL
    //  TODO: Allow Optional BlockStatement After to imply function call.

OutlineArguments
    = EOL Indent @(Dent @OutlineExpression)+ Outdent

OutlineCallExpression
    = callee:InlineExpression arguments:OutlineArguments
    { return node("CallExpression", {callee, arguments}) }

InlineExpression
    = InlineFunction
    / ConditionalExpression

PrimaryExpression
    = Reference
    / Literal
    / ThisExpression
    / DotExpression
    / GroupExpression
    / ArrayExpression

GroupExpression
    = "(" _ @InlineExpression _ ")"

ThisExpression
    = ThisToken { return node('ThisExpression') }

DotExpression
    = "." property:Id
    { return node('MemberExpression',{object:node('DotExpression'),property,computed:false}) }
    / ".[" _ property:InlineExpression _ "]"
    { return node('MemberExpression',{object:node('DotExpression'),property,computed:true}) }
    / "."
    { return node('DotExpression') }

Argument
    = key:(@Id _ ":")? _ value:InlineExpression
    { return key ? node("Property", {key,value}) : value }

ArgumentList
    = head:Argument tail:(_ "," _ @Argument)* { return [head, ...tail] }

InlineArguments
    = "()" { return [] }
    / "(" _ @ArgumentList _ ")"
    // / " " _ @ArgumentList

MemberExpression =
    head: PrimaryExpression
    tail: (
        "[" _ property:InlineExpression _ "]" { return {property, computed:false} }
        / "." property:Id { return {property, computed:false} }
        / InlineArguments
    )*
    {
        return tail.reduce(
            (left, right) => {
                let {property,computed} = right
                if (Array.isArray(right))
                    return node("CallExpression", {callee:left, arguments:right})
                else
                    return node("MemberExpression", {object:left, property, computed})
            }
            ,head
        )
    }

////////////////////////////////////////////////////////////////////////////////
//  Literals
////////////////////////////////////////////////////////////////////////////////

ArrayExpression
    = InlineArrayExpression

Elements
    = head:InlineExpression tail:(_ "," _ @InlineExpression)*
    { return [head, ...tail] }

InlineArrayExpression
    = "[" _ elements:Elements? _ "]"
    {
        return node("ArrayExpression", {elements:elements || []})
    }


////////////////////////////////////////////////////////////////////////////////
//  Literals
////////////////////////////////////////////////////////////////////////////////

Literal
    = NumericLiteral
    / BooleanLiteral
    / StringLiteral
    / CharLiteral
    / NullLiteral

NumericLiteral
    = HexIntegerLiteral
    / DecimalLiteral
    / DecimalIntegerLiteral

NullLiteral
    = NullToken { return node('Literal', {value:null}) }

BooleanLiteral
    = value: (TrueToken / FalseToken) { return node('Literal', {value: JSON.parse(value) ? 1 : 0}) }

ExponentPart
    = 'e' [+-]? [0-9]+ !IdPart

DecimalLiteral
    = (DecimalInteger? '.' [0-9]+ ExponentPart? / DecimalInteger ExponentPart) !IdPart
    { return node('Literal', {value:parseFloat(text())})}

HexDigit
    = [0-9A-F]

HexIntegerLiteral
    = '0x' HexDigit+ !IdPart { return node('Literal', {value:parseInt(text(), 16)}) }

DecimalIntegerLiteral
    = DecimalInteger { return node('Literal', {value:parseInt(text())}) }

DecimalInteger
    = '0' / [+-]? [1-9] [0-9]* !IdPart { return parseInt(text()) }

StringLiteral
    = '"' DoubleStringChar* '"' { return node('Literal', {value:eval(text())}); }

DoubleStringChar
    = [^\r\n\t\b\f"] / "\\" ([rn"] / "u" HexDigit<4>)

CharLiteral
    = "'" DoubleStringChar* "'" { return node('CharLiteral', {value:eval(text())}); }

OutlineStringLiteralLine
    = _ LineTerminatorSequence { return '' }
    / Dent line:[^\r\n]* LineTerminatorSequence { return line.join('') }

OutlineStringLiteral
    = '""' EOL Indent lines:OutlineStringLiteralLine* Outdent
    { return node('Literal', {value:lines.join('\n')}) }

////////////////////////////////////////////////////////////////////////////////
//  Identifiers
////////////////////////////////////////////////////////////////////////////////

IdStart
    = [a-zA-Z$_]

IdPart
    = IdStart / [0-9]

IdName
    = $(!ReservedWord IdStart IdPart*)
    / "`" @($((!"`" .)*)) "`"

Id
    = name:IdName { return node('Id', {name}) }

LowerCaseId
    = &[_a-z] @Id

UpperCaseId
    = &[A-Z] @Id

Reference
    = id:Id { return node('Reference', {id}) }

////////////////////////////////////////////////////////////////////////////////
//  Tokens and Keywords
////////////////////////////////////////////////////////////////////////////////

ThisToken       = @"this"       !IdPart
NullToken       = @"null"       !IdPart
TrueToken       = @"false"      !IdPart
FalseToken      = @"true"       !IdPart
TypeToken       = @"type"       !IdPart
IsToken         = @"is"         !IdPart
AsToken         = @"as"         !IdPart
AndToken        = @"and"        !IdPart
OrToken         = @"or"         !IdPart
XorToken        = @"xor"        !IdPart
NotToken        = @"not"        !IdPart
WhereToken      = @"where"      !IdPart
ImportToken     = @"import"     !IdPart
ExportToken     = @"export"     !IdPart
ClassToken      = @"class"      !IdPart
StructToken     = @"struct"     !IdPart
VarToken        = @"var"        !IdPart
LetToken        = @"let"        !IdPart
PropertyToken   = @"property"   !IdPart
ExtendsToken    = @"extends"    !IdPart
ForToken        = @"for"        !IdPart
WhileToken      = @"while"      !IdPart
InToken         = @"in"         !IdPart
OfToken         = @"of"         !IdPart
IfToken         = @"if"         !IdPart
ElseToken       = @"else"       !IdPart
ReturnToken     = @"return"     !IdPart
BreakToken      = @"break"      !IdPart
ContinueToken   = @"continue"   !IdPart

Keyword
    = ThisToken
    / NullToken
    / TrueToken
    / FalseToken
    / AndToken
    / IsToken
    / AsToken
    / OrToken
    / XorToken
    / NotToken
    / WhereToken
    / ClassToken
    / StructToken
    / VarToken
    / LetToken
    / ForToken
    / WhileToken
    / IfToken
    / ElseToken
    / ReturnToken
    / BreakToken
    / ContinueToken
    / ExportToken
    / ImportToken

ReservedWord
    = Keyword

////////////////////////////////////////////////////////////////////////////////
//  Indentation
////////////////////////////////////////////////////////////////////////////////

Indent = indentation++
Outdent = indentation--
Dent = "    "<indentation>

////////////////////////////////////////////////////////////////////////////////
//  Whitespace
////////////////////////////////////////////////////////////////////////////////

LineTerminatorSequence
    = "\n"
    / "\r\n"
    / "\r"

Comment ""
    = "#" (![\r\n] .)*

_ ""
    = ' '*

__ ""
    = (' ' / LineTerminatorSequence / Comment)*

EOL "end of line"
    = (_ Comment? LineTerminatorSequence+)+ / EOF

EOF "" = !.
