
false = 0
true = 1
Boolean = true | false
@metaProperty = true

class Vector
    x: Number
    y: Number
    z: Number = 0
    [@metaProperty]
    translate = (x: Number = 0, y: Number = 0) ->
        Vector(this.x + x, this.y + y)

()
    Boolean
    Vector
    value = 10

//  an intermediate compiled module has a single export
//  which is just it's final ExpressionStatement

// Foo =
//     &
//         < 5
//         < 4
// Foo

// double = () ->
//     if a
//         12
//         13
//     else
//         14

// AASample = . != 0

// {}
//     value: min(a, b)
//     foo() -> 2

// foo = (a: 1, optional: 10) -> 12

// [Meta]: true
// class Vector2<T> extends Foo
//     // variables with a Type are instance variable
//     x: T
//     y: T
//     // variables without a Type are static constants
//     add = (a, b) -> a + b
//     // variables that reference instance variables are calculated instance properties
//     length = (x * x + y * y) ** 0.5
//     // functions that reference this take an implicit first argument of class type
//     scale = (factor) -> Vector2(this.x * factor, this.y * factor)
