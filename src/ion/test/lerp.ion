
lerp(from, to, alpha: Number) =>
    if alpha == 0.0
        return from
    if alpha == 1.0
        return to
    return from * ( 1.0 - alpha ) + to * alpha

//  this should work for any types of `from` and `to`
//  provided the following functions exist
//      *(typeof from, Number): FromProduct
//      *(typeof to, Number): ToProduct
//      +(FromProduct, ToProduct)

Vector2 = [Number, Number]
Vector3 = [Number, Number, Number]
Vector4 = [Number, Number, Number, Number]
Color = Vector4

x(this: Number[ length: 2 .. 4 ]) => this[0]
y(this: Number[ length: 2 .. 4 ]) => this[1]
z(this: Number[ length: 3 .. 4 ]) => this[2]
w(this: Number[ length:      4 ]) => this[3]
r(this: Color) => this[0]
g(this: Color) => this[1]
b(this: Color) => this[2]
a(this: Color) => this[3]

// sum = (array) =>
//     total: array = 0
//     if a.length > 0
//         for value in array
//             total += value
//     return total
