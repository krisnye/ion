
class Id
    var name: String

class Reference extends Id

class Declaration
    var id: Id
    var export: Boolean = false

class Variable extends Declaration
    var value: Expression | Null = null
    var kind: "var" | "let" | "type" | "assignment" | "parameter"

class Call
    var callee: Expression
    var arguments: Array<Expression>

class Block
    var body: Array<Statement>

class Function extends Block
    var id: Id
    var parameters: Array<Variable>

# CompileTime TypeAST
# TypeDeclaration....

let PositiveVector =
    Vector & x > 0 & y > 0 | Point & x == 0
    Vector && x > 0 && y > 0 || Point && x == 0
    . is Vector && .x > 0 && .y > 0

    if . is Vector
        if .x > 0
            if .y > 0
                true
    if . is Point
        if .x == 0
            true
    false

no bitwise operators means we can use the shorter versions for logical operators


|       logical or
&       logical and
not     logical not # could be a function
xor     logical xor # could be done with juxtaposition operator: foo xor bar

+       addition, unary plus
-       subtraction, unary minus
*       multiplication
/       division
%       modulus
^       exponentiation

==      equals
!=      not equals
<       less than
>       greater than
<=      less than or equal
>=      greater than or equal

=       assignment
