import
    ion.*
    .*

export
    class Reference extends Identifier, Expression
        var arguments: Array<Expression> | Null = null

# a function has normal "parameters"
# a function can have type "parameters"
# type parameter
# template parameter
# generic parameter
# fundamentally, isn't it just a parameter that MUST be known at compile time?
# from OUR POV, we MUST know the generic types at runtime so we can compare if they are
# reverse = <T>(array: Array<T>) => Array<T>
