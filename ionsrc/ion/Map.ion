import
    .Native

[Native.JavaScript]: ""
    (function(){
        function createImmutableMap(map) {
            return Object.freeze(Object.assign(map, {
                clear() {},
                delete() {},
                set() {}
            }))
            
        }
        const emptyMap = createImmutableMap(new Map())
        return Object.freeze(Object.assign(function ion_Map(...keyValues){
            if (arguments.length === 0)
                return emptyMap
            let map = new Map()
            for (let i = 0; i < arguments.length; i += 2) {
                // if arguments length is odd then last value will be null
                let key = arguments[i + 0]
                let value = arguments[i + 1]
                if (key === void 0)
                    key = null
                if (value === void 0)
                    value = null
                map.set(key, value)
            }
            return createImmutableMap(map)
        }, {
            is(value, KeyType, ValueType) {
                // TODO: Once calculated on an instance we could cache the result with a unique Symbol.
                if (value !== emptyMap) {
                    if (!(value instanceof Map))
                        return false
                    for (let key of value.keys()) {
                        if (!KeyType.is(key))
                            return false
                    }
                    for (let value of value.values()) {
                        if (!ValueType.is(value))
                            return false
                    }
                }
                return true
            }
        }))
    })()
export class Map<Key,Value>
    # let has: (key:Key) => Boolean
    # let get: (key:Key) => Value | null
    # let keys: Key[]
    # let values: Value[]
